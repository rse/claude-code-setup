#!/usr/bin/env bash
##
##  claude-code-setup - Claude Code Setup Toolkit
##  Copyright (c) 2025 Dr. Ralf S. Engelschall <rse@engelschall.com>
##  Licensed under MIT <https://spdx.org/licenses/MIT>
##

#   determine real claude(1) command
claude=""
first=yes
for p in ${PATH//:/ }; do
    if [[ -x "$p/claude" ]]; then
        if [[ $first = yes ]]; then
            first=no
            continue
        else
            claude="$p/claude"
            break
        fi
    fi
done
if [[ $claude = "" ]]; then
    echo "ERROR: no real claude(1) found in \$PATH" 1>&2
    exit 1
fi

#   determine whether running NPM requires user
#   or root privileges, based on Node installation prefix
npm_prefix=$(npm config get prefix)
if [[ -w "$npm_prefix" ]]; then
    execute=""
else
    execute="sudo"
fi

#   dispatch according to command arguments
case "$1" in
    install )
        #   install claude(1)
        echo "++ install Claude Code tool"
        $execute npm install --silent -y -g \
            @anthropic-ai/claude-code

        #   install companion tools
        echo "++ install Claude Code companion tools"
        $execute npm install --silent -y -g \
            ccstatusline \
            tweakcc \
            @pyroprompts/any-chat-completions-mcp
        ;;

    update )
        #   update companion tools
        echo "++ update Claude Code companion tools"
        $execute npm update --quiet --silent -y -g \
            ccstatusline \
            tweakcc \
            @pyroprompts/any-chat-completions-mcp

        #   update claude(1)
        echo "++ update Claude Code tool"
        version_old=$(claude --version | awk '{ print $1 }')
        $execute "$claude" update
        version_new=$(claude --version | awk '{ print $1 }')

        #   re-tweak/patch afterwards (if Claude was changed)
        if [[ $version_old != $version_new ]]; then
            echo "++ patch Claude Code"
            $execute tweakcc -a
        fi
        ;;

     * )
        #   assemble non-standard context files from project
        context=()
        dir="$PWD"
        while [[ $dir != "" ]]; do
            if [[ $dir != $HOME ]]; then
                if [[ -f "$dir/etc/claude.md" ]]; then
                    context+=("$dir/etc/claude.md")
                fi
                if [ -f "$dir/.claude/CLAUDE.md" ]; then
                    context+=("$dir/.claude/CLAUDE.md")
                fi
            fi
            dir=$(dirname "$dir" | sed -e 's;^/$;;')
        done
        if [[ ${#context[@]} > 0 ]]; then
            cat ${context[@]} > "$HOME/.claude/CLAUDE.md"
        else
            rm -f "$HOME/.claude/CLAUDE.md"
        fi

        #   determine claude(1) command and pass-through execution
        if [ -f "$HOME/.claude/prompt.md" ]; then
            prompt=`cat "$HOME/.claude/prompt.md" | sed '/^$/d' | tr '\n' ' '`
            set -- --append-system-prompt "$prompt" "$@"
        fi
        set -- "$claude" "$@"
        exec "$@"
        ;;
esac

