#!/usr/bin/env bash
##
##  claude-code-setup - Claude Code Setup Toolkit
##  Copyright (c) 2025 Dr. Ralf S. Engelschall <rse@engelschall.com>
##  Licensed under MIT <https://spdx.org/licenses/MIT>
##

#   determine real claude(1) command
claude=""
first=yes
for p in ${PATH//:/ }; do
    if [[ -x "$p/claude" ]]; then
        if [[ $first = yes ]]; then
            first=no
            continue
        else
            claude="$p/claude"
            break
        fi
    fi
done
if [[ $claude = "" ]]; then
    echo "$0: ERROR: no real claude(1) found in \$PATH" 1>&2
    exit 1
fi

#   determine whether running NPM requires user
#   or root privileges, based on Node installation prefix
npm_prefix=$(npm config get prefix)
if [[ -w "$npm_prefix" ]]; then
    execute=""
else
    execute="sudo -i"
fi

#   helper function for querying NPM package version
npm_version () {
    local pkg="$1"
    $execute npm list -g --depth=0 "$pkg" | \
        grep "$pkg" | sed "s/.*@//"
}

#   helper function for installing NPM package
npm_install () {
    local pkg="$1"
    version_new=$(npm show "$pkg" version 2>/dev/null)
    if [[ -z "$version_new" ]]; then
        echo "$0: ERROR: failed to determine version for NPM package: $pkg" 1>&2
        exit 1
    fi
    echo "++ installing NPM package: $pkg ($version_new)"
    $execute npm install --quiet --silent -y -g "$pkg@$version_new"
}

#   helper function for updating NPM package
npm_update () {
    local pkg="$1"
    version_old=$(npm_version "$pkg")
    version_new=$(npm show "$pkg" version 2>/dev/null)
    if [[ -z "$version_new" ]]; then
        echo "$0: ERROR: failed to determine version for NPM package: $pkg" 1>&2
        exit 1
    fi
    if [[ $version_old != $version_new ]]; then
        echo "++ updating NPM package: $pkg ($version_old -> $version_new)"
        $execute npm install --quiet --silent -y -g "$pkg@$version_new"
    else
        echo "++ updating NPM package: $pkg ($version_old) -- still up-to-date"
    fi
}

#   dispatch according to command arguments
case "$1" in
    install )
        #   install claude(1)
        npm_install @anthropic-ai/claude-code

        #   install companion tools
        npm_install ccstatusline
        npm_install tweakcc
        npm_install @pyroprompts/any-chat-completions-mcp

        #   tweak/patch claude(1)
        echo "++ patch Claude Code"
        $execute tweakcc -a
        ;;

    update )
        #   update companion tools
        npm_update ccstatusline
        npm_update tweakcc
        npm_update @pyroprompts/any-chat-completions-mcp

        #   update claude(1)
        version_old=$(npm_version @anthropic-ai/claude-code)
        npm_update @anthropic-ai/claude-code
        version_new=$(npm_version @anthropic-ai/claude-code)

        #   re-tweak/re-patch claude(1)
        if [[ $version_old != $version_new ]]; then
            echo "++ patch Claude Code"
            rm -f "$HOME/.tweakcc/cli.js.backup"
            $execute tweakcc -a
        fi

        #   show changelog (if Claude was changed)
        if [[ $version_old != $version_new ]]; then
            echo "++ gathering Claude Code change information"
            url="https://raw.githubusercontent.com/anthropics/claude-code/refs/heads/main/CHANGELOG.md"
            prompt="Fetch the content from \"$url\", reduce to the top 5 sections, "
            prompt="$prompt and use the following output <template> for formatting each section: "
            prompt="$prompt <template>Version N.M.K:\\n- [...]\\n- [...]</template>. "
            prompt="$prompt Do not output any further explanation beside these sections."
            $claude -p "$prompt"
        fi
        ;;

     * )
        #   assemble non-standard context files from project
        context=()
        dir="$PWD"
        while [[ $dir != "" ]]; do
            if [[ $dir != $HOME ]]; then
                if [[ -f "$dir/etc/claude.md" ]]; then
                    context+=("$dir/etc/claude.md")
                fi
                if [[ -f "$dir/.claude/CLAUDE.md" ]]; then
                    context+=("$dir/.claude/CLAUDE.md")
                fi
            fi
            dir=$(dirname "$dir" | sed -e 's;^/$;;')
        done
        if [[ ${#context[@]} > 0 ]]; then
            cat ${context[@]} > "$HOME/.claude/CLAUDE.md"
        else
            rm -f "$HOME/.claude/CLAUDE.md"
        fi

        #   determine claude(1) command and pass-through execution
        if [[ -f "$HOME/.claude/prompt.md" ]]; then
            prompt=$(cat "$HOME/.claude/prompt.md" | sed '/^$/d' | tr '\n' ' ')
            set -- --append-system-prompt "$prompt" "$@"
        fi
        set -- "$claude" "$@"
        exec "$@"
        ;;
esac

